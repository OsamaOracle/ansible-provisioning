version: '3.7'
services:
  postgres:
    image: postgres:12.0
    restart: always
    environment:
      POSTGRES_PASSWORD: password123
      POSTGRES_USER: hume
    ports:
      - 5432:5432
    volumes:
      # Volume for the postgres database
      - /docker/postgres/data:/var/lib/postgresql/data
  blobstore:
    # minio is only necessary if you don't want to use S3 buckets and keep the data on a local server while taking advantage of an AWS client
    image: docker..com/internal/hume-blobstorage:1.17.2-RELEASE
    restart: always
    environment:
      - MINIO_ACCESS_KEY=hume
      - MINIO_SECRET_KEY=hume111222333
    volumes:
      # Mount a local volume on disk against the /data volume of the minio container
      - /docker/minio/data:/data
    command: "server /data"
    ports:
      - 9000:9000
  textrank_service:
    image: docker..com/internal/hume-textrank-service:2.3.0
    environment:
      - SERVER_PORT=8086
      - EUREKA_URI=http://{{ansible_host}}:8761/eureka
      - HUME_CLOUD_ENABLED=true
      - server.tomcat.max-connections=100
      - "JAVA_OPTS=-Xmx2g -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  eureka:
    image: docker..com/internal/hume-cloud-discovery:2.0.0
    ports:
      - "8761:8761"
    environment:
      - EUREKA_INSTANCE_HOSTNAME=localhost
      - EUREKA_INSTANCE_PREFER-IP-ADDRESS=true
  gateway:
    image: docker..com/internal/hume-cloud-gateway:2.0.0
    ports:
      - "10000:10000"
    depends_on:
      - annotation_service
  annotation_service:
    image: docker..com/internal/hume-annotation-service:2.3.0
    environment:
      - SERVER_PORT=8085
      - EUREKA_URI=http://eureka:8761/eureka
      - HUME_CLOUD_ENABLED=true
    volumes:
      - /docker/dzd/models:/data
      - /docker/dzd/bootstrap:/bootstrap
    ports:
      - "8085:8085"
  # If you do a Labs only installation, Neo4j is not needed.
  neo4j:
    image: neo4j:4.0.4-enterprise
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/{{hume_cloud_web_neo4j_password}}
      - NEO4J_dbms_memory_heap_maxSize=4G
      - NEO4J_dbms_connector_bolt_advertised__address={{ansible_host}}:7687
      - NEO4JLABS_PLUGINS=["apoc","graph-data-science"]
    volumes:
      - /minio/neo4j4/data/neo4j-data:/data
      - /minio/neo4j4/plugins:/plugins
  orchestra:
    image: docker..com/internal/hume-orchestra:afp
    ports:
      - 8100:8100
    volumes:
      - /docker/minio/data:/data
    environment:
      - "JAVA_OPTS=-Xmx4g -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    restart: always
  api:
    image: docker..com/internal/hume-api:afp
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hume
      - SPRING_DATASOURCE_USERNAME=hume
      - SPRING_DATASOURCE_PASSWORD=password123
      - HUME_NLP_ENGINE_ENABLED=true
      - HUME_GATEWAY_URI=https://user:password@gateway.dev.hume..com
      - HUME_NLP_ENGINE_DRIVER=feign
      - HUME_KG_NLP_ENABLED=true
      - EUREKA_URI=https://discovery.dev.hume..com/eureka
      - feign.client.config.default.connectTimeout=160000000
      - feign.client.config.default.readTimeout=160000000
      - hume.orchestra.uri=http://orchestra:8100
      - "JAVA_OPTS=-Xmx4g -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      - hume.security.rbac.enabled=true
      - hume.orchestra.experimental.enabled=true
      - hume.security.provider=keycloak
      - keycloak.auth-server-url=https://id.dev.hume..com/auth
      - keycloak.realm=hume
      - keycloak.resource=hume-web
      - keycloak.public-client=true
      - keycloak.principal-attribute=preferred_username
      - keycloak.use-resource-role-mappings=true
      - keycloak.enabled=true
  web:
    image: docker..com/internal/hume-web:afp
    environment:
      - HUME_API_URL=https://api.afp.dev.hume..com
      - KEYCLOAK_ENABLED=true
      - KEYCLOAK_URL=https://id.dev.hume..com/auth/
      - KEYCLOAK_REALM=hume
      - KEYCLOAK_CLIENT=hume-web
    ports:
      - "8081:80"

networks:
  default:
    external:
      name: reverse_proxy